package com.trao1011.warbler.database;

import java.io.*;
import java.util.*;
import java.util.logging.*;

import org.jaudiotagger.audio.*;
import org.jaudiotagger.audio.exceptions.*;
import org.jaudiotagger.audio.mp3.*;
import org.jaudiotagger.tag.*;
import org.jaudiotagger.tag.id3.*;
import org.jaudiotagger.tag.id3.framebody.FrameBodyTXXX;

public class AudioTag extends HashMap<AudioTag.Attribute, String> {
	private static final long serialVersionUID = 8166116153327789558L;

	static {
		Logger[] pin = new Logger[] { Logger.getLogger("org.jaudiotagger") };
		for (Logger l : pin)
			l.setLevel(Level.OFF);
	}

	// Autogenerated
	public enum Attribute {
		ACOUSTID_FINGERPRINT,
		ACOUSTID_ID,
		ALBUM,
		ALBUM_ARTIST,
		ALBUM_ARTIST_SORT_ORDER,
		ALBUM_SORT_ORDER,
		ARRANGER,
		ARTIST,
		ARTIST_SORT_ORDER,
		ARTISTS,
		ASIN,
		BARCODE,
		BPM,
		CATALOG_NUMBER,
		COMMENT,
		COMPILATION,
		COMPOSER,
		COMPOSER_SORT_ORDER,
		CONDUCTOR,
		COPYRIGHT,
		COUNTRY,
		COVER_ART,
		CUSTOM_1,
		CUSTOM_2,
		CUSTOM_3,
		CUSTOM_4,
		CUSTOM_5,
		DATE,
		DISC_NUMBER,
		DISCOGS_ARTIST_SITE_URL,
		DISCOGS_RELEASE_SITE_URL,
		DJ_MIXER,
		ENCODED_BY,
		ENGINEER,
		FLOATING_POINT_BPM,
		GAPLESS_PLAYBACK,
		GENRE,
		GROUPING,
		ISRC,
		KEY,
		LABEL,
		LANGUAGE,
		LYRICIST,
		LYRICS,
		LYRICS_SITE_URL,
		MEDIA,
		MIXER,
		MOOD,
		MUSICBRAINZ_ARTIST_ID,
		MUSICBRAINZ_DISC_ID,
		MUSICBRAINZ_ORIGINAL_RELEASE_ID,
		MUSICBRAINZ_RELEASE_ARTIST_ID,
		MUSICBRAINZ_RELEASE_GROUP_ID,
		MUSICBRAINZ_RELEASE_ID,
		MUSICBRAINZ_TRACK_ID,
		MUSICBRAINZ_WORK_ID,
		OCCASION,
		OFFICIAL_ARTIST_SITE_URL,
		OFFICIAL_RELEASE_SITE_URL,
		ORIGINAL_ALBUM,
		ORIGINAL_ARTIST,
		ORIGINAL_LYRICIST,
		ORIGINAL_RELEASE_DATE,
		PODCAST,
		PODCAST_URL,
		PRODUCER,
		QUALITY,
		RATING,
		RELEASE_COUNTRY,
		RELEASE_STATUS,
		RELEASE_TYPE,
		REMIXER,
		SCRIPT,
		TAGS,
		TEMPO,
		TITLE,
		TITLE_SORT_ORDER,
		TOTAL_DISCS,
		TOTAL_TRACKS,
		TRACK_NUMBER,
		WIKIPEDIA_ARTIST_SITE_URL,
		WIKIPEDIA_RELEASE_SITE_URL,

		BITRATE,
		DURATION,
		FORMAT,
		SAMPLERATE
	};

	public String get(Attribute... attributes) {
		for (Attribute a : attributes) {
			if (get(a) != null)
				return get(a);
		}
		return null;
	}

	public static AudioTag read(File f) {
		AudioFile abstractF;
		try {
			abstractF = AudioFileIO.read(f);
		} catch (CannotReadException | IOException | TagException | ReadOnlyFileException
				| InvalidAudioFrameException e) {
			return null;
		}

		if (f.getName().endsWith(".mp3"))
			return readMP3((MP3File) abstractF);
		else
			return readGeneric(abstractF);
	}

	private static AudioTag readGeneric(AudioFile f) {
		AudioTag at = new AudioTag();
		AudioHeader header = f.getAudioHeader();
		at.put(Attribute.BITRATE, header.getBitRate().startsWith("~") ? header.getBitRate().substring(1) : header.getBitRate());
		at.put(Attribute.DURATION, "" + (header.getTrackLength() * 1000));
		at.put(Attribute.FORMAT, header.getFormat());
		at.put(Attribute.SAMPLERATE, "" + header.getSampleRateAsNumber());
		if (f.getTag() == null)
			return at;

		Iterator<TagField> fields = f.getTag().getFields();
		while (fields.hasNext()) {
			TagField tf = fields.next();
			if (tf.isBinary() || tf.isEmpty())
				continue;
			
			Attribute a = getAttributeByTagIdentifier(tf.getId());
			String tagBody = ((TagTextField)tf).getContent().trim();
			if (at.containsKey(a))
				at.put(a, at.get(a) + ";" + tagBody);
			else if (a != null)
				at.put(a, tagBody);
		}
		return at;
	}

	private static AudioTag readMP3(MP3File f) {
		AudioTag at = new AudioTag();
		AudioHeader header = f.getMP3AudioHeader();
		at.put(Attribute.BITRATE, header.getBitRate().startsWith("~") ? header.getBitRate().substring(1) : header.getBitRate());
		at.put(Attribute.DURATION, "" + (int)(header.getTrackLength() * 1000));
		at.put(Attribute.FORMAT, "MP3");
		at.put(Attribute.SAMPLERATE, "" + header.getSampleRateAsNumber());
		if (f.getID3v2Tag() == null)
			return at;

		Iterator<TagField> fields = f.getID3v2Tag().getFields();
		String TDAT = null;
		while (fields.hasNext()) {
			TagField tf = fields.next();
			if (tf.isBinary() || tf.isEmpty())
				continue;
			
			String tagID = tf.getId(), tagBody = ((TagTextField) tf).getContent().trim();
			if (tagID.equals("TXXX")) {
				tagID += ":" + ((FrameBodyTXXX) ((AbstractID3v2Frame) tf).getBody()).getDescription();
			}

			// Special case for dates
			if (tagID.equals("TDAT")) {
				TDAT = tagBody;
				continue;
			}

			Attribute a = getAttributeByTagIdentifier(tagID);
			if (a == Attribute.DATE && TDAT != null)
				at.put(a, tagBody + "-" + TDAT.substring(2, 4) + "-" + TDAT.substring(0, 2));
			else if (a != null)
				at.put(a, tagBody);
		}

		return at;
	}

	// Autogenerated
	private static Attribute getAttributeByTagIdentifier(String tagID) {
		if ((tagID.equalsIgnoreCase("ACOUSTID_ID")) || (tagID.equalsIgnoreCase("TXXX:Acoustid Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:Acoustid Id")) || (tagID.equalsIgnoreCase("Acoustid/Id")))
			return Attribute.ACOUSTID_ID;
		if ((tagID.equalsIgnoreCase("ALBUM")) || (tagID.equalsIgnoreCase("TALB")) || (tagID.equalsIgnoreCase("\u00A9alb")) || (tagID.equalsIgnoreCase("WM/AlbumTitle")))
			return Attribute.ALBUM;
		if ((tagID.equalsIgnoreCase("ALBUM_ARTIST")) || (tagID.equalsIgnoreCase("TPE2")) || (tagID.equalsIgnoreCase("aART")) || (tagID.equalsIgnoreCase("ALBUMARTIST")) || (tagID.equalsIgnoreCase("WM/AlbumArtist")))
			return Attribute.ALBUM_ARTIST;
		if ((tagID.equalsIgnoreCase("ARTIST")) || (tagID.equalsIgnoreCase("TPE1")) || (tagID.equalsIgnoreCase("\u00A9ART")) || (tagID.equalsIgnoreCase("Author")))
			return Attribute.ARTIST;
		if ((tagID.equalsIgnoreCase("ARTISTS")) || (tagID.equalsIgnoreCase("TXXX:Artists")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ARTISTS")) || (tagID.equalsIgnoreCase("WM/ARTISTS")))
			return Attribute.ARTISTS;
		if ((tagID.equalsIgnoreCase("YEAR")) || (tagID.equalsIgnoreCase("TYER")) || (tagID.equalsIgnoreCase("TXXX:originalyear")) || (tagID.equalsIgnoreCase("TDRC")) || (tagID.equalsIgnoreCase("\u00A9day")) || (tagID.equalsIgnoreCase("DATE")) || (tagID.equalsIgnoreCase("WM/Year")))
			return Attribute.DATE;
		if ((tagID.equalsIgnoreCase("DISC_NO")) || (tagID.equalsIgnoreCase("TPOS")) || (tagID.equalsIgnoreCase("disk")) || (tagID.equalsIgnoreCase("DISCNUMBER")) || (tagID.equalsIgnoreCase("WM/PartOfSet")))
			return Attribute.DISC_NUMBER;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_ARTISTID")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Artist Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Artist Id")) || (tagID.equalsIgnoreCase("MusicBrainz/Artist Id")))
			return Attribute.MUSICBRAINZ_ARTIST_ID;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_RELEASEARTISTID")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Album Artist Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Album Artist Id")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_ALBUMARTISTID")) || (tagID.equalsIgnoreCase("MusicBrainz/Album Artist Id")))
			return Attribute.MUSICBRAINZ_RELEASE_ARTIST_ID;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_RELEASE_GROUP_ID")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Release Group Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Release Group Id")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_RELEASE_GROUPID")) || (tagID.equalsIgnoreCase("MusicBrainz/Release Group Id")))
			return Attribute.MUSICBRAINZ_RELEASE_GROUP_ID;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_RELEASEID")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Album Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Album Id")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_ALBUMID")) || (tagID.equalsIgnoreCase("MusicBrainz/Album Id")))
			return Attribute.MUSICBRAINZ_RELEASE_ID;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_RECORDING_ID")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Release Track Id")) || (tagID.equalsIgnoreCase("UFID:http://musicbrainz.org")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Track Id")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_TRACKID")) || (tagID.equalsIgnoreCase("MusicBrainz/Track Id")))
			return Attribute.MUSICBRAINZ_TRACK_ID;
		if ((tagID.equalsIgnoreCase("TITLE")) || (tagID.equalsIgnoreCase("TIT2")) || (tagID.equalsIgnoreCase("\u00A9nam")) || (tagID.equalsIgnoreCase("Title")))
			return Attribute.TITLE;
		if ((tagID.equalsIgnoreCase("DISC_TOTAL")) || (tagID.equalsIgnoreCase("TPOS")) || (tagID.equalsIgnoreCase("disk")) || (tagID.equalsIgnoreCase("DISCTOTAL")) || (tagID.equalsIgnoreCase("WM/DiscTotal")))
			return Attribute.TOTAL_DISCS;
		if ((tagID.equalsIgnoreCase("TRACK_TOTAL")) || (tagID.equalsIgnoreCase("TRCK")) || (tagID.equalsIgnoreCase("trkn")) || (tagID.equalsIgnoreCase("TRACKTOTAL")) || (tagID.equalsIgnoreCase("WM/TrackTotal")))
			return Attribute.TOTAL_TRACKS;
		if ((tagID.equalsIgnoreCase("TRACK")) || (tagID.equalsIgnoreCase("TRCK")) || (tagID.equalsIgnoreCase("trkn")) || (tagID.equalsIgnoreCase("TRACKNUMBER")) || (tagID.equalsIgnoreCase("WM/TrackNumber")))
			return Attribute.TRACK_NUMBER;
		return null;
		
		/*
		 * The following are loadable attributes, but we don't care about them:

		if ((tagID.equalsIgnoreCase("ACOUSTID_FINGERPRINT")) || (tagID.equalsIgnoreCase("TXXX:Acoustid Fingerprint")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:Acoustid Fingerprint")) || (tagID.equalsIgnoreCase("Acoustid/Fingerprint")))
			return Attribute.ACOUSTID_FINGERPRINT;
		if ((tagID.equalsIgnoreCase("ACOUSTID_ID")) || (tagID.equalsIgnoreCase("TXXX:Acoustid Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:Acoustid Id")) || (tagID.equalsIgnoreCase("Acoustid/Id")))
			return Attribute.ACOUSTID_ID;
		if ((tagID.equalsIgnoreCase("ALBUM_ARTIST_SORT")) || (tagID.equalsIgnoreCase("TSO2")) || (tagID.equalsIgnoreCase("soaa")) || (tagID.equalsIgnoreCase("ALBUMARTISTSORT")) || (tagID.equalsIgnoreCase("WM/AlbumArtistSortOrder")))
			return Attribute.ALBUM_ARTIST_SORT_ORDER;
		if ((tagID.equalsIgnoreCase("ALBUM_SORT")) || (tagID.equalsIgnoreCase("TSOA")) || (tagID.equalsIgnoreCase("soal")) || (tagID.equalsIgnoreCase("ALBUMSORT")) || (tagID.equalsIgnoreCase("WM/AlbumSortOrder")))
			return Attribute.ALBUM_SORT_ORDER;
		if ((tagID.equalsIgnoreCase("ARRANGER")) || (tagID.equalsIgnoreCase("TIPL:arranger")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ARRANGER")) || (tagID.equalsIgnoreCase("WM/Arranger")))
			return Attribute.ARRANGER;
		if ((tagID.equalsIgnoreCase("ARTIST_SORT")) || (tagID.equalsIgnoreCase("TSOP")) || (tagID.equalsIgnoreCase("soar")) || (tagID.equalsIgnoreCase("ARTISTSORT")) || (tagID.equalsIgnoreCase("WM/ArtistSortOrder")))
			return Attribute.ARTIST_SORT_ORDER;
		if ((tagID.equalsIgnoreCase("AMAZON_ID")) || (tagID.equalsIgnoreCase("TXXX:ASIN")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ASIN")) || (tagID.equalsIgnoreCase("ASIN")))
			return Attribute.ASIN;
		if ((tagID.equalsIgnoreCase("BARCODE")) || (tagID.equalsIgnoreCase("TXXX:BARCODE")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:BARCODE")) || (tagID.equalsIgnoreCase("WM/Barcode")))
			return Attribute.BARCODE;
		if ((tagID.equalsIgnoreCase("BPM")) || (tagID.equalsIgnoreCase("TBPM")) || (tagID.equalsIgnoreCase("tmpo")) || (tagID.equalsIgnoreCase("WM/BeatsPerMinute")))
			return Attribute.BPM;
		if ((tagID.equalsIgnoreCase("CATALOG_NO")) || (tagID.equalsIgnoreCase("TXXX:CATALOGNUMBER")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:CATALOGNUMBER")) || (tagID.equalsIgnoreCase("CATALOGNUMBER")) || (tagID.equalsIgnoreCase("WM/CatalogNo")))
			return Attribute.CATALOG_NUMBER;
		if ((tagID.equalsIgnoreCase("COMMENT")) || (tagID.equalsIgnoreCase("COMM:description")) || (tagID.equalsIgnoreCase("\u00A9cmt")) || (tagID.equalsIgnoreCase("WM/Comments (DESCRIPTION)")))
			return Attribute.COMMENT;
		if ((tagID.equalsIgnoreCase("IS_COMPILATION")) || (tagID.equalsIgnoreCase("TCMP")) || (tagID.equalsIgnoreCase("cpil")) || (tagID.equalsIgnoreCase("COMPILATION")) || (tagID.equalsIgnoreCase("WM/IsCompilation")))
			return Attribute.COMPILATION;
		if ((tagID.equalsIgnoreCase("COMPOSER")) || (tagID.equalsIgnoreCase("TCOM")) || (tagID.equalsIgnoreCase("\u00A9wrt")) || (tagID.equalsIgnoreCase("WM/Composer")))
			return Attribute.COMPOSER;
		if ((tagID.equalsIgnoreCase("COMPOSER_SORT")) || (tagID.equalsIgnoreCase("TSOC")) || (tagID.equalsIgnoreCase("soco")) || (tagID.equalsIgnoreCase("COMPOSERSORT")) || (tagID.equalsIgnoreCase("WM/ComposerSort")))
			return Attribute.COMPOSER_SORT_ORDER;
		if ((tagID.equalsIgnoreCase("CONDUCTOR")) || (tagID.equalsIgnoreCase("TPE3")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:CONDUCTOR")) || (tagID.equalsIgnoreCase("WM/Conductor")))
			return Attribute.CONDUCTOR;
		if ((tagID.equalsIgnoreCase("UFI:http://musicbrainz.org")) || (tagID.equalsIgnoreCase("TCOP")) || (tagID.equalsIgnoreCase("cprt")) || (tagID.equalsIgnoreCase("COPYRIGHT")) || (tagID.equalsIgnoreCase("Copyright")))
			return Attribute.COPYRIGHT;
		if ((tagID.equalsIgnoreCase("COUNTRY")) || (tagID.equalsIgnoreCase("TXXX:Country")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:Country")) || (tagID.equalsIgnoreCase("WM/Country")))
			return Attribute.COUNTRY;
		if ((tagID.equalsIgnoreCase("COVER_ART")) || (tagID.equalsIgnoreCase("APIC")) || (tagID.equalsIgnoreCase("covr")) || (tagID.equalsIgnoreCase("METDATABLOCKDATAPICTURE")) || (tagID.equalsIgnoreCase("WM/Picture")))
			return Attribute.COVER_ART;
		if ((tagID.equalsIgnoreCase("CUSTOM1")) || (tagID.equalsIgnoreCase("COMM:Songs-DB_Custom1")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:CUSTOM1")))
			return Attribute.CUSTOM_1;
		if ((tagID.equalsIgnoreCase("CUSTOM2")) || (tagID.equalsIgnoreCase("COMM:Songs-DB_Custom2")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:CUSTOM2")))
			return Attribute.CUSTOM_2;
		if ((tagID.equalsIgnoreCase("CUSTOM3")) || (tagID.equalsIgnoreCase("COMM:Songs-DB_Custom3")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:CUSTOM3")))
			return Attribute.CUSTOM_3;
		if ((tagID.equalsIgnoreCase("CUSTOM4")) || (tagID.equalsIgnoreCase("COMM:Songs-DB_Custom4")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:CUSTOM4")))
			return Attribute.CUSTOM_4;
		if ((tagID.equalsIgnoreCase("CUSTOM5")) || (tagID.equalsIgnoreCase("COMM:Songs-DB_Custom5")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:CUSTOM5")))
			return Attribute.CUSTOM_5;
		if ((tagID.equalsIgnoreCase("URL_DISCOGS_ARTIST_SITE")) || (tagID.equalsIgnoreCase("WXXX:DISCOGS_ARTIST")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:URL_DISCOGS_ARTIST_SITE")) || (tagID.equalsIgnoreCase("WM/DiscogsArtistUrl")))
			return Attribute.DISCOGS_ARTIST_SITE_URL;
		if ((tagID.equalsIgnoreCase("URL_DISCOGS_RELEASE_SITE")) || (tagID.equalsIgnoreCase("WXXX:DISCOGS_RELEASE")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:URL_DISCOGS_RELEASE_SITE")) || (tagID.equalsIgnoreCase("WM/DiscogsReleaseUrl")))
			return Attribute.DISCOGS_RELEASE_SITE_URL;
		if ((tagID.equalsIgnoreCase("DJMIXER,")) || (tagID.equalsIgnoreCase("TIPL:DJ-mix")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:DJMIXER")) || (tagID.equalsIgnoreCase("DJMIXER")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_ALBUMSTATUS")))
			return Attribute.DJ_MIXER;
		if ((tagID.equalsIgnoreCase("ENCODER")) || (tagID.equalsIgnoreCase("TENC")) || (tagID.equalsIgnoreCase("\u00A9too")) || (tagID.equalsIgnoreCase("VENDOR")) || (tagID.equalsIgnoreCase("WM/EncodedBy (WM/ToolName)")))
			return Attribute.ENCODED_BY;
		if ((tagID.equalsIgnoreCase("ENGINEER")) || (tagID.equalsIgnoreCase("TIPL:engineer")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ENGINEER")) || (tagID.equalsIgnoreCase("WM/Engineer")))
			return Attribute.ENGINEER;
		if ((tagID.equalsIgnoreCase("FBPM")) || (tagID.equalsIgnoreCase("TXXX:FBPM")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:fBPM")))
			return Attribute.FLOATING_POINT_BPM;
		if ((tagID.equalsIgnoreCase("ULT:description")) || (tagID.equalsIgnoreCase("USLT:description")) || (tagID.equalsIgnoreCase("pgap")) || (tagID.equalsIgnoreCase("LYRICS")))
			return Attribute.GAPLESS_PLAYBACK;
		if ((tagID.equalsIgnoreCase("GENRE")) || (tagID.equalsIgnoreCase("TCON")) || (tagID.equalsIgnoreCase("\u00A9gen")) || (tagID.equalsIgnoreCase("WM/Genre")))
			return Attribute.GENRE;
		if ((tagID.equalsIgnoreCase("GROUPING")) || (tagID.equalsIgnoreCase("TIT1")) || (tagID.equalsIgnoreCase("\u00A9grp")) || (tagID.equalsIgnoreCase("WM/ContentGroupDescription")))
			return Attribute.GROUPING;
		if ((tagID.equalsIgnoreCase("ISRC")) || (tagID.equalsIgnoreCase("TSRC")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ISRC")) || (tagID.equalsIgnoreCase("WM/ISRC")))
			return Attribute.ISRC;
		if ((tagID.equalsIgnoreCase("KEY")) || (tagID.equalsIgnoreCase("TKEY")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:KEY")) || (tagID.equalsIgnoreCase("WM/InitialKey")))
			return Attribute.KEY;
		if ((tagID.equalsIgnoreCase("RECORD_LABEL")) || (tagID.equalsIgnoreCase("TPUB")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:LABEL")) || (tagID.equalsIgnoreCase("LABEL")) || (tagID.equalsIgnoreCase("WM/Publisher")))
			return Attribute.LABEL;
		if ((tagID.equalsIgnoreCase("LANGUAGE")) || (tagID.equalsIgnoreCase("TLAN")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:LANGUAGE")) || (tagID.equalsIgnoreCase("WM/Language")))
			return Attribute.LANGUAGE;
		if ((tagID.equalsIgnoreCase("LYRICIST")) || (tagID.equalsIgnoreCase("TEXT")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:LYRICIST")) || (tagID.equalsIgnoreCase("WM/Writer")))
			return Attribute.LYRICIST;
		if ((tagID.equalsIgnoreCase("LYRICS")) || (tagID.equalsIgnoreCase("USLT:description")) || (tagID.equalsIgnoreCase("\u00A9lyr")) || (tagID.equalsIgnoreCase("WM/Lyrics")))
			return Attribute.LYRICS;
		if ((tagID.equalsIgnoreCase("LYRICS_SITE")) || (tagID.equalsIgnoreCase("WXXX:LYRICS_SITE")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:URL_LYRICS_SITE")) || (tagID.equalsIgnoreCase("URL_LYRICS_SITE")) || (tagID.equalsIgnoreCase("WM/LyricsUrl")))
			return Attribute.LYRICS_SITE_URL;
		if ((tagID.equalsIgnoreCase("MEDIA")) || (tagID.equalsIgnoreCase("TMED")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MEDIA")) || (tagID.equalsIgnoreCase("WM/Media")))
			return Attribute.MEDIA;
		if ((tagID.equalsIgnoreCase("MIXER")) || (tagID.equalsIgnoreCase("TIPL:mix")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MIXER")) || (tagID.equalsIgnoreCase("MIXER")) || (tagID.equalsIgnoreCase("WM/Mixer")))
			return Attribute.MIXER;
		if ((tagID.equalsIgnoreCase("MOOD")) || (tagID.equalsIgnoreCase("TXXX:MOOD")) || (tagID.equalsIgnoreCase("TMOO")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MOOD")) || (tagID.equalsIgnoreCase("WM/Mood")))
			return Attribute.MOOD;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_DISC_ID")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Disc Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Disc Id")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_DISCID")) || (tagID.equalsIgnoreCase("MusicBrainz/Disc Id")))
			return Attribute.MUSICBRAINZ_DISC_ID;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_ORIGINAL_RELEASE_ID")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Original Album Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Original Album Id")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_ORIGINALALBUMID")) || (tagID.equalsIgnoreCase("MusicBrainz/Original Album Id")))
			return Attribute.MUSICBRAINZ_ORIGINAL_RELEASE_ID;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_WORK_ID")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Work Id")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Work Id")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_WORKID")) || (tagID.equalsIgnoreCase("MusicBrainz/Work Id")))
			return Attribute.MUSICBRAINZ_WORK_ID;
		if ((tagID.equalsIgnoreCase("OCCASION")) || (tagID.equalsIgnoreCase("COMM:Songs-DB_Occasion")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:OCCASION")) || (tagID.equalsIgnoreCase("Occasion")))
			return Attribute.OCCASION;
		if ((tagID.equalsIgnoreCase("URL_OFFICIAL_ARTIST_SITE")) || (tagID.equalsIgnoreCase("WOAR")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:URL_OFFICIAL_ARTIST_SITE")) || (tagID.equalsIgnoreCase("WM/AuthorURL")))
			return Attribute.OFFICIAL_ARTIST_SITE_URL;
		if ((tagID.equalsIgnoreCase("URL_OFFICIAL_RELEASE_SITE")) || (tagID.equalsIgnoreCase("WXXX:OFFICIAL_RELEASE")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:URL_OFFICIAL_RELEASE_SITE")) || (tagID.equalsIgnoreCase("WM/OfficialReleaseUrl")))
			return Attribute.OFFICIAL_RELEASE_SITE_URL;
		if ((tagID.equalsIgnoreCase("ORIGINAL_ALBUM")) || (tagID.equalsIgnoreCase("TOAL")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ORIGINAL ALBUM")) || (tagID.equalsIgnoreCase("ORIGINAL ALBUM")) || (tagID.equalsIgnoreCase("WM/OriginalAlbumTitle")))
			return Attribute.ORIGINAL_ALBUM;
		if ((tagID.equalsIgnoreCase("ORIGINAL_ARTIST")) || (tagID.equalsIgnoreCase("TOPE")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ORIGINAL ARTIST")) || (tagID.equalsIgnoreCase("ORIGINAL ARTIST")) || (tagID.equalsIgnoreCase("WM/OriginalArtist")))
			return Attribute.ORIGINAL_ARTIST;
		if ((tagID.equalsIgnoreCase("ORIGINAL_LYRICIST")) || (tagID.equalsIgnoreCase("TEXT")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ORIGINAL LYRICIST")) || (tagID.equalsIgnoreCase("ORIGINAL LYRICIST")) || (tagID.equalsIgnoreCase("WM/OriginalLyricist")))
			return Attribute.ORIGINAL_LYRICIST;
		if ((tagID.equalsIgnoreCase("ORIGINAL_YEAR")) || (tagID.equalsIgnoreCase("TORY")) || (tagID.equalsIgnoreCase("TDOR")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:ORIGINAL YEAR")) || (tagID.equalsIgnoreCase("ORIGINALDATE (ORIGINAL_YEAR)")) || (tagID.equalsIgnoreCase("WM/OriginalReleaseYear")))
			return Attribute.ORIGINAL_RELEASE_DATE;
		if ((tagID.equalsIgnoreCase("WXX:WIKIPEDIA_RELEASE")) || (tagID.equalsIgnoreCase("WXXX:WIKIPEDIA_RELEASE")) || (tagID.equalsIgnoreCase("pcst")) || (tagID.equalsIgnoreCase("URL_WIKIPEDIA_RELEASE_SITE")))
			return Attribute.PODCAST;
		if ((tagID.equalsIgnoreCase("WAR")) || (tagID.equalsIgnoreCase("WOAR")) || (tagID.equalsIgnoreCase("purl")) || (tagID.equalsIgnoreCase("URL_OFFICIAL_ARTIST_SITE")))
			return Attribute.PODCAST_URL;
		if ((tagID.equalsIgnoreCase("PRODUCER")) || (tagID.equalsIgnoreCase("TIPL:producer")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:PRODUCER")) || (tagID.equalsIgnoreCase("WM/Producer")))
			return Attribute.PRODUCER;
		if ((tagID.equalsIgnoreCase("QUALITY")) || (tagID.equalsIgnoreCase("COMM:Songs-DB_Preference")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:QUALITY")) || (tagID.equalsIgnoreCase("Quality")))
			return Attribute.QUALITY;
		if ((tagID.equalsIgnoreCase("RATING")) || (tagID.equalsIgnoreCase("POPM")) || (tagID.equalsIgnoreCase("rate")) || (tagID.equalsIgnoreCase("WM/SharedUserRatiing")))
			return Attribute.RATING;
		if ((tagID.equalsIgnoreCase("COUNTRY_CODE")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Album Release Country")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Album Release Country")) || (tagID.equalsIgnoreCase("RELEASECOUNTRY")) || (tagID.equalsIgnoreCase("MusicBrainz/Album Release Country")))
			return Attribute.RELEASE_COUNTRY;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_RELEASE_STATUS")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Album Status")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Album Status")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_ALBUMSTATUS")) || (tagID.equalsIgnoreCase("MusicBrainz/Album Status")))
			return Attribute.RELEASE_STATUS;
		if ((tagID.equalsIgnoreCase("MUSICBRAINZ_RELEASE_TYPE")) || (tagID.equalsIgnoreCase("TXXX:MusicBrainz Album Type")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:MusicBrainz Album Type")) || (tagID.equalsIgnoreCase("MUSICBRAINZ_ALBUMTYPE")) || (tagID.equalsIgnoreCase("MusicBrainz/Album Type")))
			return Attribute.RELEASE_TYPE;
		if ((tagID.equalsIgnoreCase("REMIXER")) || (tagID.equalsIgnoreCase("TPE4")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:REMIXER")) || (tagID.equalsIgnoreCase("WM/ModifiedBy")))
			return Attribute.REMIXER;
		if ((tagID.equalsIgnoreCase("SCRIPT")) || (tagID.equalsIgnoreCase("TXXX:Script")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:SCRIPT")) || (tagID.equalsIgnoreCase("WM/Script")))
			return Attribute.SCRIPT;
		if ((tagID.equalsIgnoreCase("TAGS")) || (tagID.equalsIgnoreCase("TXXX:Tags")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:TAGS")) || (tagID.equalsIgnoreCase("WM/Tags")))
			return Attribute.TAGS;
		if ((tagID.equalsIgnoreCase("TEMPO")) || (tagID.equalsIgnoreCase("COMM:Songs-DB_Tempo")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:QUALITY")) || (tagID.equalsIgnoreCase("Tempo")))
			return Attribute.TEMPO;
		if ((tagID.equalsIgnoreCase("TITLE_SORT")) || (tagID.equalsIgnoreCase("TSOT")) || (tagID.equalsIgnoreCase("sonm")) || (tagID.equalsIgnoreCase("TITLESORT")) || (tagID.equalsIgnoreCase("WM/TitleSortOrder")))
			return Attribute.TITLE_SORT_ORDER;
		if ((tagID.equalsIgnoreCase("URL_WIKIPEDIA_ARTIST_SITE")) || (tagID.equalsIgnoreCase("WXXX:WIKIPEDIA_ARTIST")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:URL_WIKIPEDIA_ARTIST_SITE")) || (tagID.equalsIgnoreCase("WM/WikipediaArtistUrl")))
			return Attribute.WIKIPEDIA_ARTIST_SITE_URL;
		if ((tagID.equalsIgnoreCase("URL_WIKIPEDIA_RELEASE_SITE")) || (tagID.equalsIgnoreCase("WXXX:WIKIPEDIA_RELEASE")) || (tagID.equalsIgnoreCase("----:com.apple.iTunes:URL_WIKIPEDIA_RELEASE_SITE")) || (tagID.equalsIgnoreCase("WM/WikipediaReleaseUrl")))
			return Attribute.WIKIPEDIA_RELEASE_SITE_URL;
		 */
	}
}

